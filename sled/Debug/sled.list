
sled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000165c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080017e4  080017e4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080017e4  080017e4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080017e4  080017e4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080017e4  080017e4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017e4  080017e4  000117e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080017e8  080017e8  000117e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080017ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000c4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000d0  200000d0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ac72  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016aa  00000000  00000000  0002acae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000aa0  00000000  00000000  0002c358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009e8  00000000  00000000  0002cdf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fef4  00000000  00000000  0002d7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b089  00000000  00000000  0004d6d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5fbd  00000000  00000000  0005875d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011e71a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002c78  00000000  00000000  0011e76c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080017cc 	.word	0x080017cc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080017cc 	.word	0x080017cc

080001c8 <MAX7219_Send>:
extern SPI_HandleTypeDef hspi1;

#define MAX7219_CS_LOW  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET)
#define MAX7219_CS_HIGH HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET)

void MAX7219_Send(uint8_t addr, uint8_t data) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	460a      	mov	r2, r1
 80001d2:	71fb      	strb	r3, [r7, #7]
 80001d4:	4613      	mov	r3, r2
 80001d6:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2] = {addr, data};
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	733b      	strb	r3, [r7, #12]
 80001dc:	79bb      	ldrb	r3, [r7, #6]
 80001de:	737b      	strb	r3, [r7, #13]
    MAX7219_CS_LOW;
 80001e0:	2200      	movs	r2, #0
 80001e2:	2110      	movs	r1, #16
 80001e4:	4809      	ldr	r0, [pc, #36]	; (800020c <MAX7219_Send+0x44>)
 80001e6:	f000 fd53 	bl	8000c90 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, buf, 2, HAL_MAX_DELAY);
 80001ea:	f107 010c 	add.w	r1, r7, #12
 80001ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80001f2:	2202      	movs	r2, #2
 80001f4:	4806      	ldr	r0, [pc, #24]	; (8000210 <MAX7219_Send+0x48>)
 80001f6:	f000 fe06 	bl	8000e06 <HAL_SPI_Transmit>
    MAX7219_CS_HIGH;
 80001fa:	2201      	movs	r2, #1
 80001fc:	2110      	movs	r1, #16
 80001fe:	4803      	ldr	r0, [pc, #12]	; (800020c <MAX7219_Send+0x44>)
 8000200:	f000 fd46 	bl	8000c90 <HAL_GPIO_WritePin>
}
 8000204:	bf00      	nop
 8000206:	3710      	adds	r7, #16
 8000208:	46bd      	mov	sp, r7
 800020a:	bd80      	pop	{r7, pc}
 800020c:	40020000 	.word	0x40020000
 8000210:	20000028 	.word	0x20000028

08000214 <MAX7219_Init>:

void MAX7219_Init(void) {
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
    MAX7219_Send(0x0C, 0x01);  // Normal mode
 8000218:	2101      	movs	r1, #1
 800021a:	200c      	movs	r0, #12
 800021c:	f7ff ffd4 	bl	80001c8 <MAX7219_Send>
    MAX7219_Send(0x09, 0xFF);  // BCD decode mode
 8000220:	21ff      	movs	r1, #255	; 0xff
 8000222:	2009      	movs	r0, #9
 8000224:	f7ff ffd0 	bl	80001c8 <MAX7219_Send>
    MAX7219_Send(0x0A, 0x08);  // Brightness
 8000228:	2108      	movs	r1, #8
 800022a:	200a      	movs	r0, #10
 800022c:	f7ff ffcc 	bl	80001c8 <MAX7219_Send>
    MAX7219_Send(0x0B, 0x07);  // Scan limit (all digits)
 8000230:	2107      	movs	r1, #7
 8000232:	200b      	movs	r0, #11
 8000234:	f7ff ffc8 	bl	80001c8 <MAX7219_Send>
    MAX7219_Send(0x0F, 0x00);  // Disable test mode
 8000238:	2100      	movs	r1, #0
 800023a:	200f      	movs	r0, #15
 800023c:	f7ff ffc4 	bl	80001c8 <MAX7219_Send>
}
 8000240:	bf00      	nop
 8000242:	bd80      	pop	{r7, pc}

08000244 <Display_Hardcoded_Number>:
void Display_Hardcoded_Number(void) {
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
    MAX7219_Send(1, 4);  // Rightmost digit
 8000248:	2104      	movs	r1, #4
 800024a:	2001      	movs	r0, #1
 800024c:	f7ff ffbc 	bl	80001c8 <MAX7219_Send>
    MAX7219_Send(2, 3);
 8000250:	2103      	movs	r1, #3
 8000252:	2002      	movs	r0, #2
 8000254:	f7ff ffb8 	bl	80001c8 <MAX7219_Send>
    MAX7219_Send(3, 2);
 8000258:	2102      	movs	r1, #2
 800025a:	2003      	movs	r0, #3
 800025c:	f7ff ffb4 	bl	80001c8 <MAX7219_Send>
    MAX7219_Send(4, 1);  // Leftmost digit
 8000260:	2101      	movs	r1, #1
 8000262:	2004      	movs	r0, #4
 8000264:	f7ff ffb0 	bl	80001c8 <MAX7219_Send>
}
 8000268:	bf00      	nop
 800026a:	bd80      	pop	{r7, pc}

0800026c <Display_Number>:


void Display_Number(uint16_t num) {
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0
 8000272:	4603      	mov	r3, r0
 8000274:	80fb      	strh	r3, [r7, #6]
    for (uint8_t i = 1; i <= 4; i++) {
 8000276:	2301      	movs	r3, #1
 8000278:	73fb      	strb	r3, [r7, #15]
 800027a:	e019      	b.n	80002b0 <Display_Number+0x44>
        MAX7219_Send(i, num % 10);
 800027c:	88fa      	ldrh	r2, [r7, #6]
 800027e:	4b10      	ldr	r3, [pc, #64]	; (80002c0 <Display_Number+0x54>)
 8000280:	fba3 1302 	umull	r1, r3, r3, r2
 8000284:	08d9      	lsrs	r1, r3, #3
 8000286:	460b      	mov	r3, r1
 8000288:	009b      	lsls	r3, r3, #2
 800028a:	440b      	add	r3, r1
 800028c:	005b      	lsls	r3, r3, #1
 800028e:	1ad3      	subs	r3, r2, r3
 8000290:	b29b      	uxth	r3, r3
 8000292:	b2da      	uxtb	r2, r3
 8000294:	7bfb      	ldrb	r3, [r7, #15]
 8000296:	4611      	mov	r1, r2
 8000298:	4618      	mov	r0, r3
 800029a:	f7ff ff95 	bl	80001c8 <MAX7219_Send>
        num /= 10;
 800029e:	88fb      	ldrh	r3, [r7, #6]
 80002a0:	4a07      	ldr	r2, [pc, #28]	; (80002c0 <Display_Number+0x54>)
 80002a2:	fba2 2303 	umull	r2, r3, r2, r3
 80002a6:	08db      	lsrs	r3, r3, #3
 80002a8:	80fb      	strh	r3, [r7, #6]
    for (uint8_t i = 1; i <= 4; i++) {
 80002aa:	7bfb      	ldrb	r3, [r7, #15]
 80002ac:	3301      	adds	r3, #1
 80002ae:	73fb      	strb	r3, [r7, #15]
 80002b0:	7bfb      	ldrb	r3, [r7, #15]
 80002b2:	2b04      	cmp	r3, #4
 80002b4:	d9e2      	bls.n	800027c <Display_Number+0x10>
    }
}
 80002b6:	bf00      	nop
 80002b8:	bf00      	nop
 80002ba:	3710      	adds	r7, #16
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	cccccccd 	.word	0xcccccccd

080002c4 <main>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
static void MX_TIM2_Init(void);

int main(void) {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
    HAL_Init();
 80002c8:	f000 f9d6 	bl	8000678 <HAL_Init>
    SystemClock_Config();
 80002cc:	f000 f810 	bl	80002f0 <SystemClock_Config>
    MX_GPIO_Init();
 80002d0:	f000 f816 	bl	8000300 <MX_GPIO_Init>
    MX_SPI1_Init();
 80002d4:	f000 f856 	bl	8000384 <MX_SPI1_Init>
    MX_TIM2_Init();
 80002d8:	f000 f890 	bl	80003fc <MX_TIM2_Init>
    MAX7219_Init();
 80002dc:	f7ff ff9a 	bl	8000214 <MAX7219_Init>
    HAL_TIM_Base_Start_IT(&htim2);
 80002e0:	4802      	ldr	r0, [pc, #8]	; (80002ec <main+0x28>)
 80002e2:	f000 fff1 	bl	80012c8 <HAL_TIM_Base_Start_IT>
    Display_Hardcoded_Number();
 80002e6:	f7ff ffad 	bl	8000244 <Display_Hardcoded_Number>


    while (1) { /* Main Loop */ }
 80002ea:	e7fe      	b.n	80002ea <main+0x26>
 80002ec:	20000080 	.word	0x20000080

080002f0 <SystemClock_Config>:
}

void SystemClock_Config(void) {
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
    /* STM32CubeMX generated clock configuration */
}
 80002f4:	bf00      	nop
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
	...

08000300 <MX_GPIO_Init>:

static void MX_GPIO_Init(void) {
 8000300:	b580      	push	{r7, lr}
 8000302:	b086      	sub	sp, #24
 8000304:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	2200      	movs	r2, #0
 800030a:	601a      	str	r2, [r3, #0]
 800030c:	605a      	str	r2, [r3, #4]
 800030e:	609a      	str	r2, [r3, #8]
 8000310:	60da      	str	r2, [r3, #12]
 8000312:	611a      	str	r2, [r3, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000314:	2300      	movs	r3, #0
 8000316:	603b      	str	r3, [r7, #0]
 8000318:	4b18      	ldr	r3, [pc, #96]	; (800037c <MX_GPIO_Init+0x7c>)
 800031a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800031c:	4a17      	ldr	r2, [pc, #92]	; (800037c <MX_GPIO_Init+0x7c>)
 800031e:	f043 0301 	orr.w	r3, r3, #1
 8000322:	6313      	str	r3, [r2, #48]	; 0x30
 8000324:	4b15      	ldr	r3, [pc, #84]	; (800037c <MX_GPIO_Init+0x7c>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	f003 0301 	and.w	r3, r3, #1
 800032c:	603b      	str	r3, [r7, #0]
 800032e:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Pin = GPIO_PIN_4;  // CS for MAX7219
 8000330:	2310      	movs	r3, #16
 8000332:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000334:	2301      	movs	r3, #1
 8000336:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000338:	2300      	movs	r3, #0
 800033a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800033c:	2300      	movs	r3, #0
 800033e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	4619      	mov	r1, r3
 8000344:	480e      	ldr	r0, [pc, #56]	; (8000380 <MX_GPIO_Init+0x80>)
 8000346:	f000 fb07 	bl	8000958 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;  // Button (PA0)
 800034a:	2301      	movs	r3, #1
 800034c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800034e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000352:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000354:	2300      	movs	r3, #0
 8000356:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000358:	1d3b      	adds	r3, r7, #4
 800035a:	4619      	mov	r1, r3
 800035c:	4808      	ldr	r0, [pc, #32]	; (8000380 <MX_GPIO_Init+0x80>)
 800035e:	f000 fafb 	bl	8000958 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 8000362:	2200      	movs	r2, #0
 8000364:	2102      	movs	r1, #2
 8000366:	2006      	movs	r0, #6
 8000368:	f000 fabf 	bl	80008ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800036c:	2006      	movs	r0, #6
 800036e:	f000 fad8 	bl	8000922 <HAL_NVIC_EnableIRQ>
}
 8000372:	bf00      	nop
 8000374:	3718      	adds	r7, #24
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	40023800 	.word	0x40023800
 8000380:	40020000 	.word	0x40020000

08000384 <MX_SPI1_Init>:

static void MX_SPI1_Init(void) {
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
    __HAL_RCC_SPI1_CLK_ENABLE();
 800038a:	2300      	movs	r3, #0
 800038c:	607b      	str	r3, [r7, #4]
 800038e:	4b18      	ldr	r3, [pc, #96]	; (80003f0 <MX_SPI1_Init+0x6c>)
 8000390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000392:	4a17      	ldr	r2, [pc, #92]	; (80003f0 <MX_SPI1_Init+0x6c>)
 8000394:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000398:	6453      	str	r3, [r2, #68]	; 0x44
 800039a:	4b15      	ldr	r3, [pc, #84]	; (80003f0 <MX_SPI1_Init+0x6c>)
 800039c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800039e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80003a2:	607b      	str	r3, [r7, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]
    hspi1.Instance = SPI1;
 80003a6:	4b13      	ldr	r3, [pc, #76]	; (80003f4 <MX_SPI1_Init+0x70>)
 80003a8:	4a13      	ldr	r2, [pc, #76]	; (80003f8 <MX_SPI1_Init+0x74>)
 80003aa:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 80003ac:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <MX_SPI1_Init+0x70>)
 80003ae:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003b2:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003b4:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <MX_SPI1_Init+0x70>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003ba:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <MX_SPI1_Init+0x70>)
 80003bc:	2200      	movs	r2, #0
 80003be:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003c0:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <MX_SPI1_Init+0x70>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003c6:	4b0b      	ldr	r3, [pc, #44]	; (80003f4 <MX_SPI1_Init+0x70>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 80003cc:	4b09      	ldr	r3, [pc, #36]	; (80003f4 <MX_SPI1_Init+0x70>)
 80003ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003d2:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80003d4:	4b07      	ldr	r3, [pc, #28]	; (80003f4 <MX_SPI1_Init+0x70>)
 80003d6:	2218      	movs	r2, #24
 80003d8:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003da:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <MX_SPI1_Init+0x70>)
 80003dc:	2200      	movs	r2, #0
 80003de:	621a      	str	r2, [r3, #32]
    HAL_SPI_Init(&hspi1);
 80003e0:	4804      	ldr	r0, [pc, #16]	; (80003f4 <MX_SPI1_Init+0x70>)
 80003e2:	f000 fc87 	bl	8000cf4 <HAL_SPI_Init>
}
 80003e6:	bf00      	nop
 80003e8:	3708      	adds	r7, #8
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	40023800 	.word	0x40023800
 80003f4:	20000028 	.word	0x20000028
 80003f8:	40013000 	.word	0x40013000

080003fc <MX_TIM2_Init>:

static void MX_TIM2_Init(void) {
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000402:	2300      	movs	r3, #0
 8000404:	607b      	str	r3, [r7, #4]
 8000406:	4b16      	ldr	r3, [pc, #88]	; (8000460 <MX_TIM2_Init+0x64>)
 8000408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800040a:	4a15      	ldr	r2, [pc, #84]	; (8000460 <MX_TIM2_Init+0x64>)
 800040c:	f043 0301 	orr.w	r3, r3, #1
 8000410:	6413      	str	r3, [r2, #64]	; 0x40
 8000412:	4b13      	ldr	r3, [pc, #76]	; (8000460 <MX_TIM2_Init+0x64>)
 8000414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000416:	f003 0301 	and.w	r3, r3, #1
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]
    htim2.Instance = TIM2;
 800041e:	4b11      	ldr	r3, [pc, #68]	; (8000464 <MX_TIM2_Init+0x68>)
 8000420:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000424:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 8399;  // 10kHz clock
 8000426:	4b0f      	ldr	r3, [pc, #60]	; (8000464 <MX_TIM2_Init+0x68>)
 8000428:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800042c:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800042e:	4b0d      	ldr	r3, [pc, #52]	; (8000464 <MX_TIM2_Init+0x68>)
 8000430:	2200      	movs	r2, #0
 8000432:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 2000;  // 200ms interval
 8000434:	4b0b      	ldr	r3, [pc, #44]	; (8000464 <MX_TIM2_Init+0x68>)
 8000436:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800043a:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800043c:	4b09      	ldr	r3, [pc, #36]	; (8000464 <MX_TIM2_Init+0x68>)
 800043e:	2200      	movs	r2, #0
 8000440:	611a      	str	r2, [r3, #16]
    HAL_TIM_Base_Init(&htim2);
 8000442:	4808      	ldr	r0, [pc, #32]	; (8000464 <MX_TIM2_Init+0x68>)
 8000444:	f000 fee6 	bl	8001214 <HAL_TIM_Base_Init>

    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000448:	2200      	movs	r2, #0
 800044a:	2101      	movs	r1, #1
 800044c:	201c      	movs	r0, #28
 800044e:	f000 fa4c 	bl	80008ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000452:	201c      	movs	r0, #28
 8000454:	f000 fa65 	bl	8000922 <HAL_NVIC_EnableIRQ>
}
 8000458:	bf00      	nop
 800045a:	3708      	adds	r7, #8
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	40023800 	.word	0x40023800
 8000464:	20000080 	.word	0x20000080

08000468 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800046e:	2300      	movs	r3, #0
 8000470:	607b      	str	r3, [r7, #4]
 8000472:	4b10      	ldr	r3, [pc, #64]	; (80004b4 <HAL_MspInit+0x4c>)
 8000474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000476:	4a0f      	ldr	r2, [pc, #60]	; (80004b4 <HAL_MspInit+0x4c>)
 8000478:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800047c:	6453      	str	r3, [r2, #68]	; 0x44
 800047e:	4b0d      	ldr	r3, [pc, #52]	; (80004b4 <HAL_MspInit+0x4c>)
 8000480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000486:	607b      	str	r3, [r7, #4]
 8000488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800048a:	2300      	movs	r3, #0
 800048c:	603b      	str	r3, [r7, #0]
 800048e:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <HAL_MspInit+0x4c>)
 8000490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000492:	4a08      	ldr	r2, [pc, #32]	; (80004b4 <HAL_MspInit+0x4c>)
 8000494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000498:	6413      	str	r3, [r2, #64]	; 0x40
 800049a:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <HAL_MspInit+0x4c>)
 800049c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800049e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004a2:	603b      	str	r3, [r7, #0]
 80004a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80004a6:	2007      	movs	r0, #7
 80004a8:	f000 fa14 	bl	80008d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ac:	bf00      	nop
 80004ae:	3708      	adds	r7, #8
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	40023800 	.word	0x40023800

080004b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b08a      	sub	sp, #40	; 0x28
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c0:	f107 0314 	add.w	r3, r7, #20
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
 80004c8:	605a      	str	r2, [r3, #4]
 80004ca:	609a      	str	r2, [r3, #8]
 80004cc:	60da      	str	r2, [r3, #12]
 80004ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a19      	ldr	r2, [pc, #100]	; (800053c <HAL_SPI_MspInit+0x84>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d12b      	bne.n	8000532 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004da:	2300      	movs	r3, #0
 80004dc:	613b      	str	r3, [r7, #16]
 80004de:	4b18      	ldr	r3, [pc, #96]	; (8000540 <HAL_SPI_MspInit+0x88>)
 80004e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004e2:	4a17      	ldr	r2, [pc, #92]	; (8000540 <HAL_SPI_MspInit+0x88>)
 80004e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004e8:	6453      	str	r3, [r2, #68]	; 0x44
 80004ea:	4b15      	ldr	r3, [pc, #84]	; (8000540 <HAL_SPI_MspInit+0x88>)
 80004ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004f2:	613b      	str	r3, [r7, #16]
 80004f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f6:	2300      	movs	r3, #0
 80004f8:	60fb      	str	r3, [r7, #12]
 80004fa:	4b11      	ldr	r3, [pc, #68]	; (8000540 <HAL_SPI_MspInit+0x88>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fe:	4a10      	ldr	r2, [pc, #64]	; (8000540 <HAL_SPI_MspInit+0x88>)
 8000500:	f043 0301 	orr.w	r3, r3, #1
 8000504:	6313      	str	r3, [r2, #48]	; 0x30
 8000506:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <HAL_SPI_MspInit+0x88>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000512:	23e0      	movs	r3, #224	; 0xe0
 8000514:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000516:	2302      	movs	r3, #2
 8000518:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051a:	2300      	movs	r3, #0
 800051c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800051e:	2303      	movs	r3, #3
 8000520:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000522:	2305      	movs	r3, #5
 8000524:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000526:	f107 0314 	add.w	r3, r7, #20
 800052a:	4619      	mov	r1, r3
 800052c:	4805      	ldr	r0, [pc, #20]	; (8000544 <HAL_SPI_MspInit+0x8c>)
 800052e:	f000 fa13 	bl	8000958 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000532:	bf00      	nop
 8000534:	3728      	adds	r7, #40	; 0x28
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40013000 	.word	0x40013000
 8000540:	40023800 	.word	0x40023800
 8000544:	40020000 	.word	0x40020000

08000548 <TIM2_IRQHandler>:

extern TIM_HandleTypeDef htim2;
extern volatile uint16_t counter;
extern volatile uint8_t is_running;

void TIM2_IRQHandler(void) {
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htim2);
 800054c:	4816      	ldr	r0, [pc, #88]	; (80005a8 <TIM2_IRQHandler+0x60>)
 800054e:	f000 ff2b 	bl	80013a8 <HAL_TIM_IRQHandler>
    if (__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_UPDATE)) {
 8000552:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <TIM2_IRQHandler+0x60>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	691b      	ldr	r3, [r3, #16]
 8000558:	f003 0301 	and.w	r3, r3, #1
 800055c:	2b01      	cmp	r3, #1
 800055e:	d121      	bne.n	80005a4 <TIM2_IRQHandler+0x5c>
        __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 8000560:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <TIM2_IRQHandler+0x60>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f06f 0201 	mvn.w	r2, #1
 8000568:	611a      	str	r2, [r3, #16]
        if (is_running) {
 800056a:	4b10      	ldr	r3, [pc, #64]	; (80005ac <TIM2_IRQHandler+0x64>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d017      	beq.n	80005a4 <TIM2_IRQHandler+0x5c>
            counter = (counter + 1) % 10000;
 8000574:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <TIM2_IRQHandler+0x68>)
 8000576:	881b      	ldrh	r3, [r3, #0]
 8000578:	b29b      	uxth	r3, r3
 800057a:	3301      	adds	r3, #1
 800057c:	4a0d      	ldr	r2, [pc, #52]	; (80005b4 <TIM2_IRQHandler+0x6c>)
 800057e:	fb82 1203 	smull	r1, r2, r2, r3
 8000582:	1311      	asrs	r1, r2, #12
 8000584:	17da      	asrs	r2, r3, #31
 8000586:	1a8a      	subs	r2, r1, r2
 8000588:	f242 7110 	movw	r1, #10000	; 0x2710
 800058c:	fb01 f202 	mul.w	r2, r1, r2
 8000590:	1a9a      	subs	r2, r3, r2
 8000592:	b292      	uxth	r2, r2
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <TIM2_IRQHandler+0x68>)
 8000596:	801a      	strh	r2, [r3, #0]
            Display_Number(counter);
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <TIM2_IRQHandler+0x68>)
 800059a:	881b      	ldrh	r3, [r3, #0]
 800059c:	b29b      	uxth	r3, r3
 800059e:	4618      	mov	r0, r3
 80005a0:	f7ff fe64 	bl	800026c <Display_Number>
        }
    }
}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000080 	.word	0x20000080
 80005ac:	200000ca 	.word	0x200000ca
 80005b0:	200000c8 	.word	0x200000c8
 80005b4:	68db8bad 	.word	0x68db8bad

080005b8 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80005bc:	2001      	movs	r0, #1
 80005be:	f000 fb81 	bl	8000cc4 <HAL_GPIO_EXTI_IRQHandler>
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
	...

080005c8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0) is_running = !is_running;
 80005d2:	88fb      	ldrh	r3, [r7, #6]
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d10a      	bne.n	80005ee <HAL_GPIO_EXTI_Callback+0x26>
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <HAL_GPIO_EXTI_Callback+0x34>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	2b00      	cmp	r3, #0
 80005e0:	bf0c      	ite	eq
 80005e2:	2301      	moveq	r3, #1
 80005e4:	2300      	movne	r3, #0
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	461a      	mov	r2, r3
 80005ea:	4b04      	ldr	r3, [pc, #16]	; (80005fc <HAL_GPIO_EXTI_Callback+0x34>)
 80005ec:	701a      	strb	r2, [r3, #0]
}
 80005ee:	bf00      	nop
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	200000ca 	.word	0x200000ca

08000600 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <SystemInit+0x20>)
 8000606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800060a:	4a05      	ldr	r2, [pc, #20]	; (8000620 <SystemInit+0x20>)
 800060c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000610:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000624:	f8df d034 	ldr.w	sp, [pc, #52]	; 800065c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000628:	480d      	ldr	r0, [pc, #52]	; (8000660 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800062a:	490e      	ldr	r1, [pc, #56]	; (8000664 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800062c:	4a0e      	ldr	r2, [pc, #56]	; (8000668 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800062e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000630:	e002      	b.n	8000638 <LoopCopyDataInit>

08000632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000636:	3304      	adds	r3, #4

08000638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800063a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800063c:	d3f9      	bcc.n	8000632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800063e:	4a0b      	ldr	r2, [pc, #44]	; (800066c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000640:	4c0b      	ldr	r4, [pc, #44]	; (8000670 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000644:	e001      	b.n	800064a <LoopFillZerobss>

08000646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000648:	3204      	adds	r2, #4

0800064a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800064a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800064c:	d3fb      	bcc.n	8000646 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800064e:	f7ff ffd7 	bl	8000600 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000652:	f001 f897 	bl	8001784 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000656:	f7ff fe35 	bl	80002c4 <main>
  bx  lr    
 800065a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800065c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000664:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000668:	080017ec 	.word	0x080017ec
  ldr r2, =_sbss
 800066c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000670:	200000d0 	.word	0x200000d0

08000674 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000674:	e7fe      	b.n	8000674 <ADC_IRQHandler>
	...

08000678 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800067c:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <HAL_Init+0x40>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a0d      	ldr	r2, [pc, #52]	; (80006b8 <HAL_Init+0x40>)
 8000682:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000686:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000688:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <HAL_Init+0x40>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a0a      	ldr	r2, [pc, #40]	; (80006b8 <HAL_Init+0x40>)
 800068e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000692:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000694:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <HAL_Init+0x40>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a07      	ldr	r2, [pc, #28]	; (80006b8 <HAL_Init+0x40>)
 800069a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800069e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006a0:	2003      	movs	r0, #3
 80006a2:	f000 f917 	bl	80008d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006a6:	2000      	movs	r0, #0
 80006a8:	f000 f808 	bl	80006bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006ac:	f7ff fedc 	bl	8000468 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006b0:	2300      	movs	r3, #0
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40023c00 	.word	0x40023c00

080006bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <HAL_InitTick+0x54>)
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	4b12      	ldr	r3, [pc, #72]	; (8000714 <HAL_InitTick+0x58>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	4619      	mov	r1, r3
 80006ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 f92f 	bl	800093e <HAL_SYSTICK_Config>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006e6:	2301      	movs	r3, #1
 80006e8:	e00e      	b.n	8000708 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2b0f      	cmp	r3, #15
 80006ee:	d80a      	bhi.n	8000706 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006f0:	2200      	movs	r2, #0
 80006f2:	6879      	ldr	r1, [r7, #4]
 80006f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006f8:	f000 f8f7 	bl	80008ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006fc:	4a06      	ldr	r2, [pc, #24]	; (8000718 <HAL_InitTick+0x5c>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000702:	2300      	movs	r3, #0
 8000704:	e000      	b.n	8000708 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000706:	2301      	movs	r3, #1
}
 8000708:	4618      	mov	r0, r3
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000000 	.word	0x20000000
 8000714:	20000008 	.word	0x20000008
 8000718:	20000004 	.word	0x20000004

0800071c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  return uwTick;
 8000720:	4b03      	ldr	r3, [pc, #12]	; (8000730 <HAL_GetTick+0x14>)
 8000722:	681b      	ldr	r3, [r3, #0]
}
 8000724:	4618      	mov	r0, r3
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	200000cc 	.word	0x200000cc

08000734 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000734:	b480      	push	{r7}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	f003 0307 	and.w	r3, r3, #7
 8000742:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <__NVIC_SetPriorityGrouping+0x44>)
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800074a:	68ba      	ldr	r2, [r7, #8]
 800074c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000750:	4013      	ands	r3, r2
 8000752:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800075c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000764:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000766:	4a04      	ldr	r2, [pc, #16]	; (8000778 <__NVIC_SetPriorityGrouping+0x44>)
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	60d3      	str	r3, [r2, #12]
}
 800076c:	bf00      	nop
 800076e:	3714      	adds	r7, #20
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000780:	4b04      	ldr	r3, [pc, #16]	; (8000794 <__NVIC_GetPriorityGrouping+0x18>)
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	0a1b      	lsrs	r3, r3, #8
 8000786:	f003 0307 	and.w	r3, r3, #7
}
 800078a:	4618      	mov	r0, r3
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	e000ed00 	.word	0xe000ed00

08000798 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	db0b      	blt.n	80007c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	f003 021f 	and.w	r2, r3, #31
 80007b0:	4907      	ldr	r1, [pc, #28]	; (80007d0 <__NVIC_EnableIRQ+0x38>)
 80007b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b6:	095b      	lsrs	r3, r3, #5
 80007b8:	2001      	movs	r0, #1
 80007ba:	fa00 f202 	lsl.w	r2, r0, r2
 80007be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007c2:	bf00      	nop
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	e000e100 	.word	0xe000e100

080007d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	6039      	str	r1, [r7, #0]
 80007de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	db0a      	blt.n	80007fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	490c      	ldr	r1, [pc, #48]	; (8000820 <__NVIC_SetPriority+0x4c>)
 80007ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f2:	0112      	lsls	r2, r2, #4
 80007f4:	b2d2      	uxtb	r2, r2
 80007f6:	440b      	add	r3, r1
 80007f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007fc:	e00a      	b.n	8000814 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4908      	ldr	r1, [pc, #32]	; (8000824 <__NVIC_SetPriority+0x50>)
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	f003 030f 	and.w	r3, r3, #15
 800080a:	3b04      	subs	r3, #4
 800080c:	0112      	lsls	r2, r2, #4
 800080e:	b2d2      	uxtb	r2, r2
 8000810:	440b      	add	r3, r1
 8000812:	761a      	strb	r2, [r3, #24]
}
 8000814:	bf00      	nop
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	e000e100 	.word	0xe000e100
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000828:	b480      	push	{r7}
 800082a:	b089      	sub	sp, #36	; 0x24
 800082c:	af00      	add	r7, sp, #0
 800082e:	60f8      	str	r0, [r7, #12]
 8000830:	60b9      	str	r1, [r7, #8]
 8000832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	f003 0307 	and.w	r3, r3, #7
 800083a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800083c:	69fb      	ldr	r3, [r7, #28]
 800083e:	f1c3 0307 	rsb	r3, r3, #7
 8000842:	2b04      	cmp	r3, #4
 8000844:	bf28      	it	cs
 8000846:	2304      	movcs	r3, #4
 8000848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	3304      	adds	r3, #4
 800084e:	2b06      	cmp	r3, #6
 8000850:	d902      	bls.n	8000858 <NVIC_EncodePriority+0x30>
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	3b03      	subs	r3, #3
 8000856:	e000      	b.n	800085a <NVIC_EncodePriority+0x32>
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800085c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000860:	69bb      	ldr	r3, [r7, #24]
 8000862:	fa02 f303 	lsl.w	r3, r2, r3
 8000866:	43da      	mvns	r2, r3
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	401a      	ands	r2, r3
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000870:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	fa01 f303 	lsl.w	r3, r1, r3
 800087a:	43d9      	mvns	r1, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000880:	4313      	orrs	r3, r2
         );
}
 8000882:	4618      	mov	r0, r3
 8000884:	3724      	adds	r7, #36	; 0x24
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
	...

08000890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3b01      	subs	r3, #1
 800089c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008a0:	d301      	bcc.n	80008a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008a2:	2301      	movs	r3, #1
 80008a4:	e00f      	b.n	80008c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008a6:	4a0a      	ldr	r2, [pc, #40]	; (80008d0 <SysTick_Config+0x40>)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	3b01      	subs	r3, #1
 80008ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ae:	210f      	movs	r1, #15
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008b4:	f7ff ff8e 	bl	80007d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <SysTick_Config+0x40>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008be:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <SysTick_Config+0x40>)
 80008c0:	2207      	movs	r2, #7
 80008c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008c4:	2300      	movs	r3, #0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	e000e010 	.word	0xe000e010

080008d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f7ff ff29 	bl	8000734 <__NVIC_SetPriorityGrouping>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b086      	sub	sp, #24
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	4603      	mov	r3, r0
 80008f2:	60b9      	str	r1, [r7, #8]
 80008f4:	607a      	str	r2, [r7, #4]
 80008f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008fc:	f7ff ff3e 	bl	800077c <__NVIC_GetPriorityGrouping>
 8000900:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	68b9      	ldr	r1, [r7, #8]
 8000906:	6978      	ldr	r0, [r7, #20]
 8000908:	f7ff ff8e 	bl	8000828 <NVIC_EncodePriority>
 800090c:	4602      	mov	r2, r0
 800090e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000912:	4611      	mov	r1, r2
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff ff5d 	bl	80007d4 <__NVIC_SetPriority>
}
 800091a:	bf00      	nop
 800091c:	3718      	adds	r7, #24
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b082      	sub	sp, #8
 8000926:	af00      	add	r7, sp, #0
 8000928:	4603      	mov	r3, r0
 800092a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800092c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff ff31 	bl	8000798 <__NVIC_EnableIRQ>
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b082      	sub	sp, #8
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f7ff ffa2 	bl	8000890 <SysTick_Config>
 800094c:	4603      	mov	r3, r0
}
 800094e:	4618      	mov	r0, r3
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000958:	b480      	push	{r7}
 800095a:	b089      	sub	sp, #36	; 0x24
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800096a:	2300      	movs	r3, #0
 800096c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
 8000972:	e16b      	b.n	8000c4c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000974:	2201      	movs	r2, #1
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	fa02 f303 	lsl.w	r3, r2, r3
 800097c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	697a      	ldr	r2, [r7, #20]
 8000984:	4013      	ands	r3, r2
 8000986:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000988:	693a      	ldr	r2, [r7, #16]
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	429a      	cmp	r2, r3
 800098e:	f040 815a 	bne.w	8000c46 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	f003 0303 	and.w	r3, r3, #3
 800099a:	2b01      	cmp	r3, #1
 800099c:	d005      	beq.n	80009aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80009a6:	2b02      	cmp	r3, #2
 80009a8:	d130      	bne.n	8000a0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	2203      	movs	r2, #3
 80009b6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ba:	43db      	mvns	r3, r3
 80009bc:	69ba      	ldr	r2, [r7, #24]
 80009be:	4013      	ands	r3, r2
 80009c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	68da      	ldr	r2, [r3, #12]
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	fa02 f303 	lsl.w	r3, r2, r3
 80009ce:	69ba      	ldr	r2, [r7, #24]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	69ba      	ldr	r2, [r7, #24]
 80009d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009e0:	2201      	movs	r2, #1
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	fa02 f303 	lsl.w	r3, r2, r3
 80009e8:	43db      	mvns	r3, r3
 80009ea:	69ba      	ldr	r2, [r7, #24]
 80009ec:	4013      	ands	r3, r2
 80009ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	091b      	lsrs	r3, r3, #4
 80009f6:	f003 0201 	and.w	r2, r3, #1
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000a00:	69ba      	ldr	r2, [r7, #24]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	69ba      	ldr	r2, [r7, #24]
 8000a0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	f003 0303 	and.w	r3, r3, #3
 8000a14:	2b03      	cmp	r3, #3
 8000a16:	d017      	beq.n	8000a48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	005b      	lsls	r3, r3, #1
 8000a22:	2203      	movs	r2, #3
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	43db      	mvns	r3, r3
 8000a2a:	69ba      	ldr	r2, [r7, #24]
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	689a      	ldr	r2, [r3, #8]
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3c:	69ba      	ldr	r2, [r7, #24]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	f003 0303 	and.w	r3, r3, #3
 8000a50:	2b02      	cmp	r3, #2
 8000a52:	d123      	bne.n	8000a9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a54:	69fb      	ldr	r3, [r7, #28]
 8000a56:	08da      	lsrs	r2, r3, #3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	3208      	adds	r2, #8
 8000a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	f003 0307 	and.w	r3, r3, #7
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	220f      	movs	r2, #15
 8000a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a70:	43db      	mvns	r3, r3
 8000a72:	69ba      	ldr	r2, [r7, #24]
 8000a74:	4013      	ands	r3, r2
 8000a76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	691a      	ldr	r2, [r3, #16]
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	f003 0307 	and.w	r3, r3, #7
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	fa02 f303 	lsl.w	r3, r2, r3
 8000a88:	69ba      	ldr	r2, [r7, #24]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	08da      	lsrs	r2, r3, #3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	3208      	adds	r2, #8
 8000a96:	69b9      	ldr	r1, [r7, #24]
 8000a98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	2203      	movs	r2, #3
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	43db      	mvns	r3, r3
 8000aae:	69ba      	ldr	r2, [r7, #24]
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	f003 0203 	and.w	r2, r3, #3
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac4:	69ba      	ldr	r2, [r7, #24]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	69ba      	ldr	r2, [r7, #24]
 8000ace:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	f000 80b4 	beq.w	8000c46 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	4b60      	ldr	r3, [pc, #384]	; (8000c64 <HAL_GPIO_Init+0x30c>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae6:	4a5f      	ldr	r2, [pc, #380]	; (8000c64 <HAL_GPIO_Init+0x30c>)
 8000ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aec:	6453      	str	r3, [r2, #68]	; 0x44
 8000aee:	4b5d      	ldr	r3, [pc, #372]	; (8000c64 <HAL_GPIO_Init+0x30c>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000afa:	4a5b      	ldr	r2, [pc, #364]	; (8000c68 <HAL_GPIO_Init+0x310>)
 8000afc:	69fb      	ldr	r3, [r7, #28]
 8000afe:	089b      	lsrs	r3, r3, #2
 8000b00:	3302      	adds	r3, #2
 8000b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	f003 0303 	and.w	r3, r3, #3
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	220f      	movs	r2, #15
 8000b12:	fa02 f303 	lsl.w	r3, r2, r3
 8000b16:	43db      	mvns	r3, r3
 8000b18:	69ba      	ldr	r2, [r7, #24]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4a52      	ldr	r2, [pc, #328]	; (8000c6c <HAL_GPIO_Init+0x314>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d02b      	beq.n	8000b7e <HAL_GPIO_Init+0x226>
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4a51      	ldr	r2, [pc, #324]	; (8000c70 <HAL_GPIO_Init+0x318>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d025      	beq.n	8000b7a <HAL_GPIO_Init+0x222>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4a50      	ldr	r2, [pc, #320]	; (8000c74 <HAL_GPIO_Init+0x31c>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d01f      	beq.n	8000b76 <HAL_GPIO_Init+0x21e>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4a4f      	ldr	r2, [pc, #316]	; (8000c78 <HAL_GPIO_Init+0x320>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d019      	beq.n	8000b72 <HAL_GPIO_Init+0x21a>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4a4e      	ldr	r2, [pc, #312]	; (8000c7c <HAL_GPIO_Init+0x324>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d013      	beq.n	8000b6e <HAL_GPIO_Init+0x216>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4a4d      	ldr	r2, [pc, #308]	; (8000c80 <HAL_GPIO_Init+0x328>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d00d      	beq.n	8000b6a <HAL_GPIO_Init+0x212>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4a4c      	ldr	r2, [pc, #304]	; (8000c84 <HAL_GPIO_Init+0x32c>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d007      	beq.n	8000b66 <HAL_GPIO_Init+0x20e>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4a4b      	ldr	r2, [pc, #300]	; (8000c88 <HAL_GPIO_Init+0x330>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d101      	bne.n	8000b62 <HAL_GPIO_Init+0x20a>
 8000b5e:	2307      	movs	r3, #7
 8000b60:	e00e      	b.n	8000b80 <HAL_GPIO_Init+0x228>
 8000b62:	2308      	movs	r3, #8
 8000b64:	e00c      	b.n	8000b80 <HAL_GPIO_Init+0x228>
 8000b66:	2306      	movs	r3, #6
 8000b68:	e00a      	b.n	8000b80 <HAL_GPIO_Init+0x228>
 8000b6a:	2305      	movs	r3, #5
 8000b6c:	e008      	b.n	8000b80 <HAL_GPIO_Init+0x228>
 8000b6e:	2304      	movs	r3, #4
 8000b70:	e006      	b.n	8000b80 <HAL_GPIO_Init+0x228>
 8000b72:	2303      	movs	r3, #3
 8000b74:	e004      	b.n	8000b80 <HAL_GPIO_Init+0x228>
 8000b76:	2302      	movs	r3, #2
 8000b78:	e002      	b.n	8000b80 <HAL_GPIO_Init+0x228>
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e000      	b.n	8000b80 <HAL_GPIO_Init+0x228>
 8000b7e:	2300      	movs	r3, #0
 8000b80:	69fa      	ldr	r2, [r7, #28]
 8000b82:	f002 0203 	and.w	r2, r2, #3
 8000b86:	0092      	lsls	r2, r2, #2
 8000b88:	4093      	lsls	r3, r2
 8000b8a:	69ba      	ldr	r2, [r7, #24]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b90:	4935      	ldr	r1, [pc, #212]	; (8000c68 <HAL_GPIO_Init+0x310>)
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	089b      	lsrs	r3, r3, #2
 8000b96:	3302      	adds	r3, #2
 8000b98:	69ba      	ldr	r2, [r7, #24]
 8000b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b9e:	4b3b      	ldr	r3, [pc, #236]	; (8000c8c <HAL_GPIO_Init+0x334>)
 8000ba0:	689b      	ldr	r3, [r3, #8]
 8000ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	69ba      	ldr	r2, [r7, #24]
 8000baa:	4013      	ands	r3, r2
 8000bac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d003      	beq.n	8000bc2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000bba:	69ba      	ldr	r2, [r7, #24]
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000bc2:	4a32      	ldr	r2, [pc, #200]	; (8000c8c <HAL_GPIO_Init+0x334>)
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bc8:	4b30      	ldr	r3, [pc, #192]	; (8000c8c <HAL_GPIO_Init+0x334>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	43db      	mvns	r3, r3
 8000bd2:	69ba      	ldr	r2, [r7, #24]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d003      	beq.n	8000bec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000be4:	69ba      	ldr	r2, [r7, #24]
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000bec:	4a27      	ldr	r2, [pc, #156]	; (8000c8c <HAL_GPIO_Init+0x334>)
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000bf2:	4b26      	ldr	r3, [pc, #152]	; (8000c8c <HAL_GPIO_Init+0x334>)
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	43db      	mvns	r3, r3
 8000bfc:	69ba      	ldr	r2, [r7, #24]
 8000bfe:	4013      	ands	r3, r2
 8000c00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d003      	beq.n	8000c16 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000c0e:	69ba      	ldr	r2, [r7, #24]
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000c16:	4a1d      	ldr	r2, [pc, #116]	; (8000c8c <HAL_GPIO_Init+0x334>)
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c1c:	4b1b      	ldr	r3, [pc, #108]	; (8000c8c <HAL_GPIO_Init+0x334>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	43db      	mvns	r3, r3
 8000c26:	69ba      	ldr	r2, [r7, #24]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d003      	beq.n	8000c40 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000c38:	69ba      	ldr	r2, [r7, #24]
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000c40:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <HAL_GPIO_Init+0x334>)
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	61fb      	str	r3, [r7, #28]
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	2b0f      	cmp	r3, #15
 8000c50:	f67f ae90 	bls.w	8000974 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000c54:	bf00      	nop
 8000c56:	bf00      	nop
 8000c58:	3724      	adds	r7, #36	; 0x24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40013800 	.word	0x40013800
 8000c6c:	40020000 	.word	0x40020000
 8000c70:	40020400 	.word	0x40020400
 8000c74:	40020800 	.word	0x40020800
 8000c78:	40020c00 	.word	0x40020c00
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	40021400 	.word	0x40021400
 8000c84:	40021800 	.word	0x40021800
 8000c88:	40021c00 	.word	0x40021c00
 8000c8c:	40013c00 	.word	0x40013c00

08000c90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	460b      	mov	r3, r1
 8000c9a:	807b      	strh	r3, [r7, #2]
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ca0:	787b      	ldrb	r3, [r7, #1]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d003      	beq.n	8000cae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ca6:	887a      	ldrh	r2, [r7, #2]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000cac:	e003      	b.n	8000cb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000cae:	887b      	ldrh	r3, [r7, #2]
 8000cb0:	041a      	lsls	r2, r3, #16
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	619a      	str	r2, [r3, #24]
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
	...

08000cc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cd0:	695a      	ldr	r2, [r3, #20]
 8000cd2:	88fb      	ldrh	r3, [r7, #6]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d006      	beq.n	8000ce8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000cda:	4a05      	ldr	r2, [pc, #20]	; (8000cf0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cdc:	88fb      	ldrh	r3, [r7, #6]
 8000cde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ce0:	88fb      	ldrh	r3, [r7, #6]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff fc70 	bl	80005c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40013c00 	.word	0x40013c00

08000cf4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d101      	bne.n	8000d06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e07b      	b.n	8000dfe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d108      	bne.n	8000d20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000d16:	d009      	beq.n	8000d2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	61da      	str	r2, [r3, #28]
 8000d1e:	e005      	b.n	8000d2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2200      	movs	r2, #0
 8000d24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d106      	bne.n	8000d4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2200      	movs	r2, #0
 8000d42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f7ff fbb6 	bl	80004b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2202      	movs	r2, #2
 8000d50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d62:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8000d74:	431a      	orrs	r2, r3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d7e:	431a      	orrs	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	691b      	ldr	r3, [r3, #16]
 8000d84:	f003 0302 	and.w	r3, r3, #2
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	695b      	ldr	r3, [r3, #20]
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	431a      	orrs	r2, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d9c:	431a      	orrs	r2, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	69db      	ldr	r3, [r3, #28]
 8000da2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000da6:	431a      	orrs	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6a1b      	ldr	r3, [r3, #32]
 8000dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000db0:	ea42 0103 	orr.w	r1, r2, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	430a      	orrs	r2, r1
 8000dc2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	0c1b      	lsrs	r3, r3, #16
 8000dca:	f003 0104 	and.w	r1, r3, #4
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd2:	f003 0210 	and.w	r2, r3, #16
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	69da      	ldr	r2, [r3, #28]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000dec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2200      	movs	r2, #0
 8000df2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2201      	movs	r2, #1
 8000df8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b088      	sub	sp, #32
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	60f8      	str	r0, [r7, #12]
 8000e0e:	60b9      	str	r1, [r7, #8]
 8000e10:	603b      	str	r3, [r7, #0]
 8000e12:	4613      	mov	r3, r2
 8000e14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8000e16:	2300      	movs	r3, #0
 8000e18:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d101      	bne.n	8000e28 <HAL_SPI_Transmit+0x22>
 8000e24:	2302      	movs	r3, #2
 8000e26:	e126      	b.n	8001076 <HAL_SPI_Transmit+0x270>
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8000e30:	f7ff fc74 	bl	800071c <HAL_GetTick>
 8000e34:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8000e36:	88fb      	ldrh	r3, [r7, #6]
 8000e38:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d002      	beq.n	8000e4c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8000e46:	2302      	movs	r3, #2
 8000e48:	77fb      	strb	r3, [r7, #31]
    goto error;
 8000e4a:	e10b      	b.n	8001064 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d002      	beq.n	8000e58 <HAL_SPI_Transmit+0x52>
 8000e52:	88fb      	ldrh	r3, [r7, #6]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d102      	bne.n	8000e5e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8000e5c:	e102      	b.n	8001064 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	2203      	movs	r2, #3
 8000e62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	68ba      	ldr	r2, [r7, #8]
 8000e70:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	88fa      	ldrh	r2, [r7, #6]
 8000e76:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	88fa      	ldrh	r2, [r7, #6]
 8000e7c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	2200      	movs	r2, #0
 8000e82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2200      	movs	r2, #0
 8000e88:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	2200      	movs	r2, #0
 8000e94:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ea4:	d10f      	bne.n	8000ec6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000eb4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ec4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ed0:	2b40      	cmp	r3, #64	; 0x40
 8000ed2:	d007      	beq.n	8000ee4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ee2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000eec:	d14b      	bne.n	8000f86 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d002      	beq.n	8000efc <HAL_SPI_Transmit+0xf6>
 8000ef6:	8afb      	ldrh	r3, [r7, #22]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d13e      	bne.n	8000f7a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f00:	881a      	ldrh	r2, [r3, #0]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0c:	1c9a      	adds	r2, r3, #2
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	3b01      	subs	r3, #1
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8000f20:	e02b      	b.n	8000f7a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	f003 0302 	and.w	r3, r3, #2
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d112      	bne.n	8000f56 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f34:	881a      	ldrh	r2, [r3, #0]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f40:	1c9a      	adds	r2, r3, #2
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	86da      	strh	r2, [r3, #54]	; 0x36
 8000f54:	e011      	b.n	8000f7a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8000f56:	f7ff fbe1 	bl	800071c <HAL_GetTick>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	683a      	ldr	r2, [r7, #0]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d803      	bhi.n	8000f6e <HAL_SPI_Transmit+0x168>
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f6c:	d102      	bne.n	8000f74 <HAL_SPI_Transmit+0x16e>
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d102      	bne.n	8000f7a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8000f74:	2303      	movs	r3, #3
 8000f76:	77fb      	strb	r3, [r7, #31]
          goto error;
 8000f78:	e074      	b.n	8001064 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d1ce      	bne.n	8000f22 <HAL_SPI_Transmit+0x11c>
 8000f84:	e04c      	b.n	8001020 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d002      	beq.n	8000f94 <HAL_SPI_Transmit+0x18e>
 8000f8e:	8afb      	ldrh	r3, [r7, #22]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d140      	bne.n	8001016 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	330c      	adds	r3, #12
 8000f9e:	7812      	ldrb	r2, [r2, #0]
 8000fa0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	1c5a      	adds	r2, r3, #1
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	b29a      	uxth	r2, r3
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8000fba:	e02c      	b.n	8001016 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d113      	bne.n	8000ff2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	330c      	adds	r3, #12
 8000fd4:	7812      	ldrb	r2, [r2, #0]
 8000fd6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fdc:	1c5a      	adds	r2, r3, #1
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	86da      	strh	r2, [r3, #54]	; 0x36
 8000ff0:	e011      	b.n	8001016 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8000ff2:	f7ff fb93 	bl	800071c <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	683a      	ldr	r2, [r7, #0]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d803      	bhi.n	800100a <HAL_SPI_Transmit+0x204>
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001008:	d102      	bne.n	8001010 <HAL_SPI_Transmit+0x20a>
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d102      	bne.n	8001016 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001010:	2303      	movs	r3, #3
 8001012:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001014:	e026      	b.n	8001064 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800101a:	b29b      	uxth	r3, r3
 800101c:	2b00      	cmp	r3, #0
 800101e:	d1cd      	bne.n	8000fbc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	6839      	ldr	r1, [r7, #0]
 8001024:	68f8      	ldr	r0, [r7, #12]
 8001026:	f000 f8b3 	bl	8001190 <SPI_EndRxTxTransaction>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d002      	beq.n	8001036 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2220      	movs	r2, #32
 8001034:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d10a      	bne.n	8001054 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001058:	2b00      	cmp	r3, #0
 800105a:	d002      	beq.n	8001062 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	77fb      	strb	r3, [r7, #31]
 8001060:	e000      	b.n	8001064 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001062:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2201      	movs	r2, #1
 8001068:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2200      	movs	r2, #0
 8001070:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001074:	7ffb      	ldrb	r3, [r7, #31]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3720      	adds	r7, #32
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b088      	sub	sp, #32
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	603b      	str	r3, [r7, #0]
 800108c:	4613      	mov	r3, r2
 800108e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001090:	f7ff fb44 	bl	800071c <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001098:	1a9b      	subs	r3, r3, r2
 800109a:	683a      	ldr	r2, [r7, #0]
 800109c:	4413      	add	r3, r2
 800109e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80010a0:	f7ff fb3c 	bl	800071c <HAL_GetTick>
 80010a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80010a6:	4b39      	ldr	r3, [pc, #228]	; (800118c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	015b      	lsls	r3, r3, #5
 80010ac:	0d1b      	lsrs	r3, r3, #20
 80010ae:	69fa      	ldr	r2, [r7, #28]
 80010b0:	fb02 f303 	mul.w	r3, r2, r3
 80010b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80010b6:	e054      	b.n	8001162 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010be:	d050      	beq.n	8001162 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80010c0:	f7ff fb2c 	bl	800071c <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	69fa      	ldr	r2, [r7, #28]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d902      	bls.n	80010d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d13d      	bne.n	8001152 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	685a      	ldr	r2, [r3, #4]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80010e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80010ee:	d111      	bne.n	8001114 <SPI_WaitFlagStateUntilTimeout+0x94>
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80010f8:	d004      	beq.n	8001104 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001102:	d107      	bne.n	8001114 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001112:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001118:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800111c:	d10f      	bne.n	800113e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800113c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2201      	movs	r2, #1
 8001142:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2200      	movs	r2, #0
 800114a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e017      	b.n	8001182 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d101      	bne.n	800115c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001158:	2300      	movs	r3, #0
 800115a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	3b01      	subs	r3, #1
 8001160:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	689a      	ldr	r2, [r3, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	4013      	ands	r3, r2
 800116c:	68ba      	ldr	r2, [r7, #8]
 800116e:	429a      	cmp	r2, r3
 8001170:	bf0c      	ite	eq
 8001172:	2301      	moveq	r3, #1
 8001174:	2300      	movne	r3, #0
 8001176:	b2db      	uxtb	r3, r3
 8001178:	461a      	mov	r2, r3
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	429a      	cmp	r2, r3
 800117e:	d19b      	bne.n	80010b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3720      	adds	r7, #32
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000000 	.word	0x20000000

08001190 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af02      	add	r7, sp, #8
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800119c:	4b1b      	ldr	r3, [pc, #108]	; (800120c <SPI_EndRxTxTransaction+0x7c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a1b      	ldr	r2, [pc, #108]	; (8001210 <SPI_EndRxTxTransaction+0x80>)
 80011a2:	fba2 2303 	umull	r2, r3, r2, r3
 80011a6:	0d5b      	lsrs	r3, r3, #21
 80011a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011ac:	fb02 f303 	mul.w	r3, r2, r3
 80011b0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80011ba:	d112      	bne.n	80011e2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	2200      	movs	r2, #0
 80011c4:	2180      	movs	r1, #128	; 0x80
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f7ff ff5a 	bl	8001080 <SPI_WaitFlagStateUntilTimeout>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d016      	beq.n	8001200 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011d6:	f043 0220 	orr.w	r2, r3, #32
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e00f      	b.n	8001202 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d00a      	beq.n	80011fe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f8:	2b80      	cmp	r3, #128	; 0x80
 80011fa:	d0f2      	beq.n	80011e2 <SPI_EndRxTxTransaction+0x52>
 80011fc:	e000      	b.n	8001200 <SPI_EndRxTxTransaction+0x70>
        break;
 80011fe:	bf00      	nop
  }

  return HAL_OK;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3718      	adds	r7, #24
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000000 	.word	0x20000000
 8001210:	165e9f81 	.word	0x165e9f81

08001214 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d101      	bne.n	8001226 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e041      	b.n	80012aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b00      	cmp	r3, #0
 8001230:	d106      	bne.n	8001240 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f000 f839 	bl	80012b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2202      	movs	r2, #2
 8001244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3304      	adds	r3, #4
 8001250:	4619      	mov	r1, r3
 8001252:	4610      	mov	r0, r2
 8001254:	f000 f9e2 	bl	800161c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2201      	movs	r2, #1
 800125c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2201      	movs	r2, #1
 8001264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2201      	movs	r2, #1
 800126c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2201      	movs	r2, #1
 8001274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2201      	movs	r2, #1
 800127c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2201      	movs	r2, #1
 8001284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2201      	movs	r2, #1
 800128c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2201      	movs	r2, #1
 8001294:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2201      	movs	r2, #1
 800129c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2201      	movs	r2, #1
 80012a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b083      	sub	sp, #12
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
	...

080012c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d001      	beq.n	80012e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e04e      	b.n	800137e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2202      	movs	r2, #2
 80012e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	68da      	ldr	r2, [r3, #12]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f042 0201 	orr.w	r2, r2, #1
 80012f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a23      	ldr	r2, [pc, #140]	; (800138c <HAL_TIM_Base_Start_IT+0xc4>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d022      	beq.n	8001348 <HAL_TIM_Base_Start_IT+0x80>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800130a:	d01d      	beq.n	8001348 <HAL_TIM_Base_Start_IT+0x80>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a1f      	ldr	r2, [pc, #124]	; (8001390 <HAL_TIM_Base_Start_IT+0xc8>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d018      	beq.n	8001348 <HAL_TIM_Base_Start_IT+0x80>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a1e      	ldr	r2, [pc, #120]	; (8001394 <HAL_TIM_Base_Start_IT+0xcc>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d013      	beq.n	8001348 <HAL_TIM_Base_Start_IT+0x80>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a1c      	ldr	r2, [pc, #112]	; (8001398 <HAL_TIM_Base_Start_IT+0xd0>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d00e      	beq.n	8001348 <HAL_TIM_Base_Start_IT+0x80>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a1b      	ldr	r2, [pc, #108]	; (800139c <HAL_TIM_Base_Start_IT+0xd4>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d009      	beq.n	8001348 <HAL_TIM_Base_Start_IT+0x80>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a19      	ldr	r2, [pc, #100]	; (80013a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d004      	beq.n	8001348 <HAL_TIM_Base_Start_IT+0x80>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a18      	ldr	r2, [pc, #96]	; (80013a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d111      	bne.n	800136c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2b06      	cmp	r3, #6
 8001358:	d010      	beq.n	800137c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f042 0201 	orr.w	r2, r2, #1
 8001368:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800136a:	e007      	b.n	800137c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f042 0201 	orr.w	r2, r2, #1
 800137a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	40010000 	.word	0x40010000
 8001390:	40000400 	.word	0x40000400
 8001394:	40000800 	.word	0x40000800
 8001398:	40000c00 	.word	0x40000c00
 800139c:	40010400 	.word	0x40010400
 80013a0:	40014000 	.word	0x40014000
 80013a4:	40001800 	.word	0x40001800

080013a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d122      	bne.n	8001404 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d11b      	bne.n	8001404 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f06f 0202 	mvn.w	r2, #2
 80013d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2201      	movs	r2, #1
 80013da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	f003 0303 	and.w	r3, r3, #3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f000 f8f8 	bl	80015e0 <HAL_TIM_IC_CaptureCallback>
 80013f0:	e005      	b.n	80013fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f000 f8ea 	bl	80015cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f000 f8fb 	bl	80015f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	691b      	ldr	r3, [r3, #16]
 800140a:	f003 0304 	and.w	r3, r3, #4
 800140e:	2b04      	cmp	r3, #4
 8001410:	d122      	bne.n	8001458 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	f003 0304 	and.w	r3, r3, #4
 800141c:	2b04      	cmp	r3, #4
 800141e:	d11b      	bne.n	8001458 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f06f 0204 	mvn.w	r2, #4
 8001428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2202      	movs	r2, #2
 800142e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f000 f8ce 	bl	80015e0 <HAL_TIM_IC_CaptureCallback>
 8001444:	e005      	b.n	8001452 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f000 f8c0 	bl	80015cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f000 f8d1 	bl	80015f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	691b      	ldr	r3, [r3, #16]
 800145e:	f003 0308 	and.w	r3, r3, #8
 8001462:	2b08      	cmp	r3, #8
 8001464:	d122      	bne.n	80014ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	f003 0308 	and.w	r3, r3, #8
 8001470:	2b08      	cmp	r3, #8
 8001472:	d11b      	bne.n	80014ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f06f 0208 	mvn.w	r2, #8
 800147c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2204      	movs	r2, #4
 8001482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	f003 0303 	and.w	r3, r3, #3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f000 f8a4 	bl	80015e0 <HAL_TIM_IC_CaptureCallback>
 8001498:	e005      	b.n	80014a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f000 f896 	bl	80015cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f000 f8a7 	bl	80015f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	f003 0310 	and.w	r3, r3, #16
 80014b6:	2b10      	cmp	r3, #16
 80014b8:	d122      	bne.n	8001500 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	f003 0310 	and.w	r3, r3, #16
 80014c4:	2b10      	cmp	r3, #16
 80014c6:	d11b      	bne.n	8001500 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f06f 0210 	mvn.w	r2, #16
 80014d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2208      	movs	r2, #8
 80014d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f000 f87a 	bl	80015e0 <HAL_TIM_IC_CaptureCallback>
 80014ec:	e005      	b.n	80014fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 f86c 	bl	80015cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f000 f87d 	bl	80015f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	2b01      	cmp	r3, #1
 800150c:	d10e      	bne.n	800152c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	2b01      	cmp	r3, #1
 800151a:	d107      	bne.n	800152c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f06f 0201 	mvn.w	r2, #1
 8001524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f000 f846 	bl	80015b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001536:	2b80      	cmp	r3, #128	; 0x80
 8001538:	d10e      	bne.n	8001558 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001544:	2b80      	cmp	r3, #128	; 0x80
 8001546:	d107      	bne.n	8001558 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 f90c 	bl	8001770 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001562:	2b40      	cmp	r3, #64	; 0x40
 8001564:	d10e      	bne.n	8001584 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001570:	2b40      	cmp	r3, #64	; 0x40
 8001572:	d107      	bne.n	8001584 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800157c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f000 f842 	bl	8001608 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	f003 0320 	and.w	r3, r3, #32
 800158e:	2b20      	cmp	r3, #32
 8001590:	d10e      	bne.n	80015b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	f003 0320 	and.w	r3, r3, #32
 800159c:	2b20      	cmp	r3, #32
 800159e:	d107      	bne.n	80015b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f06f 0220 	mvn.w	r2, #32
 80015a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f000 f8d6 	bl	800175c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a40      	ldr	r2, [pc, #256]	; (8001730 <TIM_Base_SetConfig+0x114>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d013      	beq.n	800165c <TIM_Base_SetConfig+0x40>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800163a:	d00f      	beq.n	800165c <TIM_Base_SetConfig+0x40>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4a3d      	ldr	r2, [pc, #244]	; (8001734 <TIM_Base_SetConfig+0x118>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d00b      	beq.n	800165c <TIM_Base_SetConfig+0x40>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a3c      	ldr	r2, [pc, #240]	; (8001738 <TIM_Base_SetConfig+0x11c>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d007      	beq.n	800165c <TIM_Base_SetConfig+0x40>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a3b      	ldr	r2, [pc, #236]	; (800173c <TIM_Base_SetConfig+0x120>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d003      	beq.n	800165c <TIM_Base_SetConfig+0x40>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4a3a      	ldr	r2, [pc, #232]	; (8001740 <TIM_Base_SetConfig+0x124>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d108      	bne.n	800166e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001662:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	68fa      	ldr	r2, [r7, #12]
 800166a:	4313      	orrs	r3, r2
 800166c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a2f      	ldr	r2, [pc, #188]	; (8001730 <TIM_Base_SetConfig+0x114>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d02b      	beq.n	80016ce <TIM_Base_SetConfig+0xb2>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800167c:	d027      	beq.n	80016ce <TIM_Base_SetConfig+0xb2>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a2c      	ldr	r2, [pc, #176]	; (8001734 <TIM_Base_SetConfig+0x118>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d023      	beq.n	80016ce <TIM_Base_SetConfig+0xb2>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a2b      	ldr	r2, [pc, #172]	; (8001738 <TIM_Base_SetConfig+0x11c>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d01f      	beq.n	80016ce <TIM_Base_SetConfig+0xb2>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a2a      	ldr	r2, [pc, #168]	; (800173c <TIM_Base_SetConfig+0x120>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d01b      	beq.n	80016ce <TIM_Base_SetConfig+0xb2>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a29      	ldr	r2, [pc, #164]	; (8001740 <TIM_Base_SetConfig+0x124>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d017      	beq.n	80016ce <TIM_Base_SetConfig+0xb2>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a28      	ldr	r2, [pc, #160]	; (8001744 <TIM_Base_SetConfig+0x128>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d013      	beq.n	80016ce <TIM_Base_SetConfig+0xb2>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a27      	ldr	r2, [pc, #156]	; (8001748 <TIM_Base_SetConfig+0x12c>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d00f      	beq.n	80016ce <TIM_Base_SetConfig+0xb2>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a26      	ldr	r2, [pc, #152]	; (800174c <TIM_Base_SetConfig+0x130>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d00b      	beq.n	80016ce <TIM_Base_SetConfig+0xb2>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a25      	ldr	r2, [pc, #148]	; (8001750 <TIM_Base_SetConfig+0x134>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d007      	beq.n	80016ce <TIM_Base_SetConfig+0xb2>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a24      	ldr	r2, [pc, #144]	; (8001754 <TIM_Base_SetConfig+0x138>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d003      	beq.n	80016ce <TIM_Base_SetConfig+0xb2>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a23      	ldr	r2, [pc, #140]	; (8001758 <TIM_Base_SetConfig+0x13c>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d108      	bne.n	80016e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	4313      	orrs	r3, r2
 80016de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <TIM_Base_SetConfig+0x114>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d003      	beq.n	8001714 <TIM_Base_SetConfig+0xf8>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4a0c      	ldr	r2, [pc, #48]	; (8001740 <TIM_Base_SetConfig+0x124>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d103      	bne.n	800171c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	691a      	ldr	r2, [r3, #16]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2201      	movs	r2, #1
 8001720:	615a      	str	r2, [r3, #20]
}
 8001722:	bf00      	nop
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	40010000 	.word	0x40010000
 8001734:	40000400 	.word	0x40000400
 8001738:	40000800 	.word	0x40000800
 800173c:	40000c00 	.word	0x40000c00
 8001740:	40010400 	.word	0x40010400
 8001744:	40014000 	.word	0x40014000
 8001748:	40014400 	.word	0x40014400
 800174c:	40014800 	.word	0x40014800
 8001750:	40001800 	.word	0x40001800
 8001754:	40001c00 	.word	0x40001c00
 8001758:	40002000 	.word	0x40002000

0800175c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <__libc_init_array>:
 8001784:	b570      	push	{r4, r5, r6, lr}
 8001786:	4d0d      	ldr	r5, [pc, #52]	; (80017bc <__libc_init_array+0x38>)
 8001788:	4c0d      	ldr	r4, [pc, #52]	; (80017c0 <__libc_init_array+0x3c>)
 800178a:	1b64      	subs	r4, r4, r5
 800178c:	10a4      	asrs	r4, r4, #2
 800178e:	2600      	movs	r6, #0
 8001790:	42a6      	cmp	r6, r4
 8001792:	d109      	bne.n	80017a8 <__libc_init_array+0x24>
 8001794:	4d0b      	ldr	r5, [pc, #44]	; (80017c4 <__libc_init_array+0x40>)
 8001796:	4c0c      	ldr	r4, [pc, #48]	; (80017c8 <__libc_init_array+0x44>)
 8001798:	f000 f818 	bl	80017cc <_init>
 800179c:	1b64      	subs	r4, r4, r5
 800179e:	10a4      	asrs	r4, r4, #2
 80017a0:	2600      	movs	r6, #0
 80017a2:	42a6      	cmp	r6, r4
 80017a4:	d105      	bne.n	80017b2 <__libc_init_array+0x2e>
 80017a6:	bd70      	pop	{r4, r5, r6, pc}
 80017a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80017ac:	4798      	blx	r3
 80017ae:	3601      	adds	r6, #1
 80017b0:	e7ee      	b.n	8001790 <__libc_init_array+0xc>
 80017b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80017b6:	4798      	blx	r3
 80017b8:	3601      	adds	r6, #1
 80017ba:	e7f2      	b.n	80017a2 <__libc_init_array+0x1e>
 80017bc:	080017e4 	.word	0x080017e4
 80017c0:	080017e4 	.word	0x080017e4
 80017c4:	080017e4 	.word	0x080017e4
 80017c8:	080017e8 	.word	0x080017e8

080017cc <_init>:
 80017cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ce:	bf00      	nop
 80017d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017d2:	bc08      	pop	{r3}
 80017d4:	469e      	mov	lr, r3
 80017d6:	4770      	bx	lr

080017d8 <_fini>:
 80017d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017da:	bf00      	nop
 80017dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017de:	bc08      	pop	{r3}
 80017e0:	469e      	mov	lr, r3
 80017e2:	4770      	bx	lr
